<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="78234702"><g><title>hovinen::output (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="341" width="1.2821%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="325" width="1.2821%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="309" width="1.2821%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="293" width="1.2821%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="303.50"></text></g><g><title>core::fmt::write (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="277" width="1.2821%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="287.50"></text></g><g><title>core::fmt::run (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="261" width="1.2821%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="271.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="245" width="1.2821%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="255.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="229" width="1.2821%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="239.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="213" width="1.2821%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="223.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="197" width="1.2821%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="207.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="181" width="1.2821%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="191.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1,003,009 samples, 1.28%)</title><rect x="0.0000%" y="165" width="1.2821%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,009,027 samples, 3.85%)</title><rect x="6.4103%" y="325" width="3.8462%" height="15" fill="rgb(216,20,37)" fg:x="5015045" fg:w="3009027"/><text x="6.6603%" y="335.50">&lt;all..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,009,027 samples, 3.85%)</title><rect x="6.4103%" y="309" width="3.8462%" height="15" fill="rgb(206,188,39)" fg:x="5015045" fg:w="3009027"/><text x="6.6603%" y="319.50">core..</text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 3.85%)</title><rect x="6.4103%" y="293" width="3.8462%" height="15" fill="rgb(217,207,13)" fg:x="5015045" fg:w="3009027"/><text x="6.6603%" y="303.50">&lt;cor..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,009,027 samples, 3.85%)</title><rect x="6.4103%" y="277" width="3.8462%" height="15" fill="rgb(231,73,38)" fg:x="5015045" fg:w="3009027"/><text x="6.6603%" y="287.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::find (1,003,009 samples, 1.28%)</title><rect x="10.2564%" y="325" width="1.2821%" height="15" fill="rgb(225,20,46)" fg:x="8024072" fg:w="1003009"/><text x="10.5064%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,003,009 samples, 1.28%)</title><rect x="10.2564%" y="309" width="1.2821%" height="15" fill="rgb(210,31,41)" fg:x="8024072" fg:w="1003009"/><text x="10.5064%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 1.28%)</title><rect x="10.2564%" y="293" width="1.2821%" height="15" fill="rgb(221,200,47)" fg:x="8024072" fg:w="1003009"/><text x="10.5064%" y="303.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (2,006,018 samples, 2.56%)</title><rect x="19.2308%" y="277" width="2.5641%" height="15" fill="rgb(226,26,5)" fg:x="15045135" fg:w="2006018"/><text x="19.4808%" y="287.50">co..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (1,003,009 samples, 1.28%)</title><rect x="20.5128%" y="261" width="1.2821%" height="15" fill="rgb(249,33,26)" fg:x="16048144" fg:w="1003009"/><text x="20.7628%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,003,009 samples, 1.28%)</title><rect x="26.9231%" y="213" width="1.2821%" height="15" fill="rgb(235,183,28)" fg:x="21063189" fg:w="1003009"/><text x="27.1731%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,003,009 samples, 1.28%)</title><rect x="26.9231%" y="197" width="1.2821%" height="15" fill="rgb(221,5,38)" fg:x="21063189" fg:w="1003009"/><text x="27.1731%" y="207.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (2,006,018 samples, 2.56%)</title><rect x="26.9231%" y="245" width="2.5641%" height="15" fill="rgb(247,18,42)" fg:x="21063189" fg:w="2006018"/><text x="27.1731%" y="255.50">co..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (2,006,018 samples, 2.56%)</title><rect x="26.9231%" y="229" width="2.5641%" height="15" fill="rgb(241,131,45)" fg:x="21063189" fg:w="2006018"/><text x="27.1731%" y="239.50">&lt;[..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1,003,009 samples, 1.28%)</title><rect x="28.2051%" y="213" width="1.2821%" height="15" fill="rgb(249,31,29)" fg:x="22066198" fg:w="1003009"/><text x="28.4551%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (15,045,135 samples, 19.23%)</title><rect x="11.5385%" y="325" width="19.2308%" height="15" fill="rgb(225,111,53)" fg:x="9027081" fg:w="15045135"/><text x="11.7885%" y="335.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (15,045,135 samples, 19.23%)</title><rect x="11.5385%" y="309" width="19.2308%" height="15" fill="rgb(238,160,17)" fg:x="9027081" fg:w="15045135"/><text x="11.7885%" y="319.50">core::num::dec2flt::&lt;impl core..</text></g><g><title>core::num::dec2flt::dec2flt (14,042,126 samples, 17.95%)</title><rect x="12.8205%" y="293" width="17.9487%" height="15" fill="rgb(214,148,48)" fg:x="10030090" fg:w="14042126"/><text x="13.0705%" y="303.50">core::num::dec2flt::dec2flt</text></g><g><title>core::num::dec2flt::parse::parse_number (7,021,063 samples, 8.97%)</title><rect x="21.7949%" y="277" width="8.9744%" height="15" fill="rgb(232,36,49)" fg:x="17051153" fg:w="7021063"/><text x="22.0449%" y="287.50">core::num::de..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (3,009,027 samples, 3.85%)</title><rect x="26.9231%" y="261" width="3.8462%" height="15" fill="rgb(209,103,24)" fg:x="21063189" fg:w="3009027"/><text x="27.1731%" y="271.50">core..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (1,003,009 samples, 1.28%)</title><rect x="29.4872%" y="245" width="1.2821%" height="15" fill="rgb(229,88,8)" fg:x="23069207" fg:w="1003009"/><text x="29.7372%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 1.28%)</title><rect x="32.0513%" y="197" width="1.2821%" height="15" fill="rgb(213,181,19)" fg:x="25075225" fg:w="1003009"/><text x="32.3013%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 1.28%)</title><rect x="32.0513%" y="181" width="1.2821%" height="15" fill="rgb(254,191,54)" fg:x="25075225" fg:w="1003009"/><text x="32.3013%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11,033,099 samples, 14.10%)</title><rect x="30.7692%" y="245" width="14.1026%" height="15" fill="rgb(241,83,37)" fg:x="24072216" fg:w="11033099"/><text x="31.0192%" y="255.50">&lt;std::hash::random::D..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11,033,099 samples, 14.10%)</title><rect x="30.7692%" y="229" width="14.1026%" height="15" fill="rgb(233,36,39)" fg:x="24072216" fg:w="11033099"/><text x="31.0192%" y="239.50">&lt;core::hash::sip::Sip..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11,033,099 samples, 14.10%)</title><rect x="30.7692%" y="213" width="14.1026%" height="15" fill="rgb(226,3,54)" fg:x="24072216" fg:w="11033099"/><text x="31.0192%" y="223.50">&lt;core::hash::sip::Has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9,027,081 samples, 11.54%)</title><rect x="33.3333%" y="197" width="11.5385%" height="15" fill="rgb(245,192,40)" fg:x="26078234" fg:w="9027081"/><text x="33.5833%" y="207.50">&lt;core::hash::sip:..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,021,063 samples, 8.97%)</title><rect x="35.8974%" y="181" width="8.9744%" height="15" fill="rgb(238,167,29)" fg:x="28084252" fg:w="7021063"/><text x="36.1474%" y="191.50">core::num::&lt;i..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 3.85%)</title><rect x="44.8718%" y="165" width="3.8462%" height="15" fill="rgb(232,182,51)" fg:x="35105315" fg:w="3009027"/><text x="45.1218%" y="175.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 1.28%)</title><rect x="50.0000%" y="133" width="1.2821%" height="15" fill="rgb(231,60,39)" fg:x="39117351" fg:w="1003009"/><text x="50.2500%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 1.28%)</title><rect x="50.0000%" y="117" width="1.2821%" height="15" fill="rgb(208,69,12)" fg:x="39117351" fg:w="1003009"/><text x="50.2500%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (17,051,153 samples, 21.79%)</title><rect x="30.7692%" y="277" width="21.7949%" height="15" fill="rgb(235,93,37)" fg:x="24072216" fg:w="17051153"/><text x="31.0192%" y="287.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (17,051,153 samples, 21.79%)</title><rect x="30.7692%" y="261" width="21.7949%" height="15" fill="rgb(213,116,39)" fg:x="24072216" fg:w="17051153"/><text x="31.0192%" y="271.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,018,054 samples, 7.69%)</title><rect x="44.8718%" y="245" width="7.6923%" height="15" fill="rgb(222,207,29)" fg:x="35105315" fg:w="6018054"/><text x="45.1218%" y="255.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (6,018,054 samples, 7.69%)</title><rect x="44.8718%" y="229" width="7.6923%" height="15" fill="rgb(206,96,30)" fg:x="35105315" fg:w="6018054"/><text x="45.1218%" y="239.50">core::hash:..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (6,018,054 samples, 7.69%)</title><rect x="44.8718%" y="213" width="7.6923%" height="15" fill="rgb(218,138,4)" fg:x="35105315" fg:w="6018054"/><text x="45.1218%" y="223.50">&lt;std::hash:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (6,018,054 samples, 7.69%)</title><rect x="44.8718%" y="197" width="7.6923%" height="15" fill="rgb(250,191,14)" fg:x="35105315" fg:w="6018054"/><text x="45.1218%" y="207.50">&lt;core::hash..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (6,018,054 samples, 7.69%)</title><rect x="44.8718%" y="181" width="7.6923%" height="15" fill="rgb(239,60,40)" fg:x="35105315" fg:w="6018054"/><text x="45.1218%" y="191.50">&lt;core::hash..</text></g><g><title>core::hash::Hasher::write_u8 (3,009,027 samples, 3.85%)</title><rect x="48.7179%" y="165" width="3.8462%" height="15" fill="rgb(206,27,48)" fg:x="38114342" fg:w="3009027"/><text x="48.9679%" y="175.50">core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 3.85%)</title><rect x="48.7179%" y="149" width="3.8462%" height="15" fill="rgb(225,35,8)" fg:x="38114342" fg:w="3009027"/><text x="48.9679%" y="159.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 1.28%)</title><rect x="51.2821%" y="133" width="1.2821%" height="15" fill="rgb(250,213,24)" fg:x="40120360" fg:w="1003009"/><text x="51.5321%" y="143.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (13,039,117 samples, 16.67%)</title><rect x="56.4103%" y="213" width="16.6667%" height="15" fill="rgb(247,123,22)" fg:x="44132396" fg:w="13039117"/><text x="56.6603%" y="223.50">hashbrown::map::equivalent..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (13,039,117 samples, 16.67%)</title><rect x="56.4103%" y="197" width="16.6667%" height="15" fill="rgb(231,138,38)" fg:x="44132396" fg:w="13039117"/><text x="56.6603%" y="207.50">&lt;Q as hashbrown::Equivalen..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12,036,108 samples, 15.38%)</title><rect x="57.6923%" y="181" width="15.3846%" height="15" fill="rgb(231,145,46)" fg:x="45135405" fg:w="12036108"/><text x="57.9423%" y="191.50">core::cmp::impls::&lt;impl ..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12,036,108 samples, 15.38%)</title><rect x="57.6923%" y="165" width="15.3846%" height="15" fill="rgb(251,118,11)" fg:x="45135405" fg:w="12036108"/><text x="57.9423%" y="175.50">core::str::traits::&lt;impl..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12,036,108 samples, 15.38%)</title><rect x="57.6923%" y="149" width="15.3846%" height="15" fill="rgb(217,147,25)" fg:x="45135405" fg:w="12036108"/><text x="57.9423%" y="159.50">core::cmp::impls::&lt;impl ..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (12,036,108 samples, 15.38%)</title><rect x="57.6923%" y="133" width="15.3846%" height="15" fill="rgb(247,81,37)" fg:x="45135405" fg:w="12036108"/><text x="57.9423%" y="143.50">core::slice::cmp::&lt;impl ..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,036,108 samples, 15.38%)</title><rect x="57.6923%" y="117" width="15.3846%" height="15" fill="rgb(209,12,38)" fg:x="45135405" fg:w="12036108"/><text x="57.9423%" y="127.50">&lt;[A] as core::slice::cmp..</text></g><g><title>[libc.so.6] (7,021,063 samples, 8.97%)</title><rect x="64.1026%" y="101" width="8.9744%" height="15" fill="rgb(227,1,9)" fg:x="50150450" fg:w="7021063"/><text x="64.3526%" y="111.50">[libc.so.6]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (14,042,126 samples, 17.95%)</title><rect x="56.4103%" y="229" width="17.9487%" height="15" fill="rgb(248,47,43)" fg:x="44132396" fg:w="14042126"/><text x="56.6603%" y="239.50">hashbrown::raw::RawTable&lt;T,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,003,009 samples, 1.28%)</title><rect x="73.0769%" y="213" width="1.2821%" height="15" fill="rgb(221,10,30)" fg:x="57171513" fg:w="1003009"/><text x="73.3269%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,003,009 samples, 1.28%)</title><rect x="73.0769%" y="197" width="1.2821%" height="15" fill="rgb(210,229,1)" fg:x="57171513" fg:w="1003009"/><text x="73.3269%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,003,009 samples, 1.28%)</title><rect x="73.0769%" y="181" width="1.2821%" height="15" fill="rgb(222,148,37)" fg:x="57171513" fg:w="1003009"/><text x="73.3269%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (4,012,036 samples, 5.13%)</title><rect x="74.3590%" y="229" width="5.1282%" height="15" fill="rgb(234,67,33)" fg:x="58174522" fg:w="4012036"/><text x="74.6090%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,003,009 samples, 1.28%)</title><rect x="79.4872%" y="229" width="1.2821%" height="15" fill="rgb(247,98,35)" fg:x="62186558" fg:w="1003009"/><text x="79.7372%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,003,009 samples, 1.28%)</title><rect x="79.4872%" y="213" width="1.2821%" height="15" fill="rgb(247,138,52)" fg:x="62186558" fg:w="1003009"/><text x="79.7372%" y="223.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (41,123,369 samples, 52.56%)</title><rect x="30.7692%" y="325" width="52.5641%" height="15" fill="rgb(213,79,30)" fg:x="24072216" fg:w="41123369"/><text x="31.0192%" y="335.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (41,123,369 samples, 52.56%)</title><rect x="30.7692%" y="309" width="52.5641%" height="15" fill="rgb(246,177,23)" fg:x="24072216" fg:w="41123369"/><text x="31.0192%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (41,123,369 samples, 52.56%)</title><rect x="30.7692%" y="293" width="52.5641%" height="15" fill="rgb(230,62,27)" fg:x="24072216" fg:w="41123369"/><text x="31.0192%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (24,072,216 samples, 30.77%)</title><rect x="52.5641%" y="277" width="30.7692%" height="15" fill="rgb(216,154,8)" fg:x="41123369" fg:w="24072216"/><text x="52.8141%" y="287.50">hashbrown::raw::RawTable&lt;T,A&gt;::get_mut</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24,072,216 samples, 30.77%)</title><rect x="52.5641%" y="261" width="30.7692%" height="15" fill="rgb(244,35,45)" fg:x="41123369" fg:w="24072216"/><text x="52.8141%" y="271.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (24,072,216 samples, 30.77%)</title><rect x="52.5641%" y="245" width="30.7692%" height="15" fill="rgb(251,115,12)" fg:x="41123369" fg:w="24072216"/><text x="52.8141%" y="255.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2,006,018 samples, 2.56%)</title><rect x="80.7692%" y="229" width="2.5641%" height="15" fill="rgb(240,54,50)" fg:x="63189567" fg:w="2006018"/><text x="81.0192%" y="239.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,006,018 samples, 2.56%)</title><rect x="80.7692%" y="213" width="2.5641%" height="15" fill="rgb(233,84,52)" fg:x="63189567" fg:w="2006018"/><text x="81.0192%" y="223.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 2.56%)</title><rect x="80.7692%" y="197" width="2.5641%" height="15" fill="rgb(207,117,47)" fg:x="63189567" fg:w="2006018"/><text x="81.0192%" y="207.50">co..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1,003,009 samples, 1.28%)</title><rect x="85.8974%" y="293" width="1.2821%" height="15" fill="rgb(249,43,39)" fg:x="67201603" fg:w="1003009"/><text x="86.1474%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (1,003,009 samples, 1.28%)</title><rect x="85.8974%" y="277" width="1.2821%" height="15" fill="rgb(209,38,44)" fg:x="67201603" fg:w="1003009"/><text x="86.1474%" y="287.50"></text></g><g><title>core::cmp::min (1,003,009 samples, 1.28%)</title><rect x="85.8974%" y="261" width="1.2821%" height="15" fill="rgb(236,212,23)" fg:x="67201603" fg:w="1003009"/><text x="86.1474%" y="271.50"></text></g><g><title>core::cmp::Ord::min (1,003,009 samples, 1.28%)</title><rect x="85.8974%" y="245" width="1.2821%" height="15" fill="rgb(242,79,21)" fg:x="67201603" fg:w="1003009"/><text x="86.1474%" y="255.50"></text></g><g><title>core::cmp::min_by (1,003,009 samples, 1.28%)</title><rect x="85.8974%" y="229" width="1.2821%" height="15" fill="rgb(211,96,35)" fg:x="67201603" fg:w="1003009"/><text x="86.1474%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="293" width="2.5641%" height="15" fill="rgb(253,215,40)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="303.50">&lt;s..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="277" width="2.5641%" height="15" fill="rgb(211,81,21)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="287.50">st..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="261" width="2.5641%" height="15" fill="rgb(208,190,38)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="271.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="245" width="2.5641%" height="15" fill="rgb(235,213,38)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="255.50">&lt;s..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="229" width="2.5641%" height="15" fill="rgb(237,122,38)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="239.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="213" width="2.5641%" height="15" fill="rgb(244,218,35)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="223.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="197" width="2.5641%" height="15" fill="rgb(240,68,47)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="207.50">st..</text></g><g><title>read (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="181" width="2.5641%" height="15" fill="rgb(210,16,53)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="191.50">re..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="165" width="2.5641%" height="15" fill="rgb(235,124,12)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="175.50">en..</text></g><g><title>do_syscall_64 (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="149" width="2.5641%" height="15" fill="rgb(224,169,11)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="159.50">do..</text></g><g><title>x64_sys_call (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="133" width="2.5641%" height="15" fill="rgb(250,166,2)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="143.50">x6..</text></g><g><title>__x64_sys_read (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="117" width="2.5641%" height="15" fill="rgb(242,216,29)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="127.50">__..</text></g><g><title>ksys_read (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="101" width="2.5641%" height="15" fill="rgb(230,116,27)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="111.50">ks..</text></g><g><title>vfs_read (2,006,018 samples, 2.56%)</title><rect x="87.1795%" y="85" width="2.5641%" height="15" fill="rgb(228,99,48)" fg:x="68204612" fg:w="2006018"/><text x="87.4295%" y="95.50">vf..</text></g><g><title>ext4_file_read_iter (1,003,009 samples, 1.28%)</title><rect x="88.4615%" y="69" width="1.2821%" height="15" fill="rgb(253,11,6)" fg:x="69207621" fg:w="1003009"/><text x="88.7115%" y="79.50"></text></g><g><title>generic_file_read_iter (1,003,009 samples, 1.28%)</title><rect x="88.4615%" y="53" width="1.2821%" height="15" fill="rgb(247,143,39)" fg:x="69207621" fg:w="1003009"/><text x="88.7115%" y="63.50"></text></g><g><title>filemap_read (1,003,009 samples, 1.28%)</title><rect x="88.4615%" y="37" width="1.2821%" height="15" fill="rgb(236,97,10)" fg:x="69207621" fg:w="1003009"/><text x="88.7115%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,003,009 samples, 1.28%)</title><rect x="89.7436%" y="293" width="1.2821%" height="15" fill="rgb(233,208,19)" fg:x="70210630" fg:w="1003009"/><text x="89.9936%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,003,009 samples, 1.28%)</title><rect x="89.7436%" y="277" width="1.2821%" height="15" fill="rgb(216,164,2)" fg:x="70210630" fg:w="1003009"/><text x="89.9936%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,003,009 samples, 1.28%)</title><rect x="89.7436%" y="261" width="1.2821%" height="15" fill="rgb(220,129,5)" fg:x="70210630" fg:w="1003009"/><text x="89.9936%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 1.28%)</title><rect x="89.7436%" y="245" width="1.2821%" height="15" fill="rgb(242,17,10)" fg:x="70210630" fg:w="1003009"/><text x="89.9936%" y="255.50"></text></g><g><title>[libc.so.6] (1,003,009 samples, 1.28%)</title><rect x="89.7436%" y="229" width="1.2821%" height="15" fill="rgb(242,107,0)" fg:x="70210630" fg:w="1003009"/><text x="89.9936%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,003,009 samples, 1.28%)</title><rect x="91.0256%" y="293" width="1.2821%" height="15" fill="rgb(251,28,31)" fg:x="71213639" fg:w="1003009"/><text x="91.2756%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 1.28%)</title><rect x="91.0256%" y="277" width="1.2821%" height="15" fill="rgb(233,223,10)" fg:x="71213639" fg:w="1003009"/><text x="91.2756%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,003,009 samples, 1.28%)</title><rect x="91.0256%" y="261" width="1.2821%" height="15" fill="rgb(215,21,27)" fg:x="71213639" fg:w="1003009"/><text x="91.2756%" y="271.50"></text></g><g><title>all (78,234,702 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="655.50"></text></g><g><title>hovinen (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="639.50">hovinen</text></g><g><title>_start (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="623.50">_start</text></g><g><title>__libc_start_main (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="607.50">__libc_start_main</text></g><g><title>[libc.so.6] (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="591.50">[libc.so.6]</text></g><g><title>main (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="399.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>hovinen::main (78,234,702 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="78234702"/><text x="0.2500%" y="367.50">hovinen::main</text></g><g><title>hovinen::process_file (77,231,693 samples, 98.72%)</title><rect x="1.2821%" y="341" width="98.7179%" height="15" fill="rgb(251,123,47)" fg:x="1003009" fg:w="77231693"/><text x="1.5321%" y="351.50">hovinen::process_file</text></g><g><title>std::io::BufRead::read_until (13,039,117 samples, 16.67%)</title><rect x="83.3333%" y="325" width="16.6667%" height="15" fill="rgb(221,13,13)" fg:x="65195585" fg:w="13039117"/><text x="83.5833%" y="335.50">std::io::BufRead::read_unt..</text></g><g><title>std::io::read_until (13,039,117 samples, 16.67%)</title><rect x="83.3333%" y="309" width="16.6667%" height="15" fill="rgb(238,131,9)" fg:x="65195585" fg:w="13039117"/><text x="83.5833%" y="319.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (6,018,054 samples, 7.69%)</title><rect x="92.3077%" y="293" width="7.6923%" height="15" fill="rgb(211,50,8)" fg:x="72216648" fg:w="6018054"/><text x="92.5577%" y="303.50">core::slice..</text></g><g><title>core::slice::memchr::memchr_aligned (6,018,054 samples, 7.69%)</title><rect x="92.3077%" y="277" width="7.6923%" height="15" fill="rgb(245,182,24)" fg:x="72216648" fg:w="6018054"/><text x="92.5577%" y="287.50">core::slice..</text></g><g><title>core::slice::memchr::memchr_naive (3,009,027 samples, 3.85%)</title><rect x="96.1538%" y="261" width="3.8462%" height="15" fill="rgb(242,14,37)" fg:x="75225675" fg:w="3009027"/><text x="96.4038%" y="271.50">core..</text></g></svg></svg>